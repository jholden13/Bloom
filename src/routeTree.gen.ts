/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsIndexImport } from './routes/projects.index'
import { Route as ProjectsNewImport } from './routes/projects.new'
import { Route as ProjectsProjectIdImport } from './routes/projects.$projectId'
import { Route as ProjectsProjectIdEditImport } from './routes/projects.$projectId.edit'
import { Route as ProjectsProjectIdExpertsNewImport } from './routes/projects.$projectId.experts.new'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsNewRoute = ProjectsNewImport.update({
  id: '/projects/new',
  path: '/projects/new',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdEditRoute = ProjectsProjectIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ProjectsProjectIdRoute,
} as any)

const ProjectsProjectIdExpertsNewRoute =
  ProjectsProjectIdExpertsNewImport.update({
    id: '/experts/new',
    path: '/experts/new',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/new': {
      id: '/projects/new'
      path: '/projects/new'
      fullPath: '/projects/new'
      preLoaderRoute: typeof ProjectsNewImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/edit': {
      id: '/projects/$projectId/edit'
      path: '/edit'
      fullPath: '/projects/$projectId/edit'
      preLoaderRoute: typeof ProjectsProjectIdEditImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/experts/new': {
      id: '/projects/$projectId/experts/new'
      path: '/experts/new'
      fullPath: '/projects/$projectId/experts/new'
      preLoaderRoute: typeof ProjectsProjectIdExpertsNewImport
      parentRoute: typeof ProjectsProjectIdImport
    }
  }
}

// Create and export the route tree

interface ProjectsProjectIdRouteChildren {
  ProjectsProjectIdEditRoute: typeof ProjectsProjectIdEditRoute
  ProjectsProjectIdExpertsNewRoute: typeof ProjectsProjectIdExpertsNewRoute
}

const ProjectsProjectIdRouteChildren: ProjectsProjectIdRouteChildren = {
  ProjectsProjectIdEditRoute: ProjectsProjectIdEditRoute,
  ProjectsProjectIdExpertsNewRoute: ProjectsProjectIdExpertsNewRoute,
}

const ProjectsProjectIdRouteWithChildren =
  ProjectsProjectIdRoute._addFileChildren(ProjectsProjectIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects/new': typeof ProjectsNewRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/edit': typeof ProjectsProjectIdEditRoute
  '/projects/$projectId/experts/new': typeof ProjectsProjectIdExpertsNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects/new': typeof ProjectsNewRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/edit': typeof ProjectsProjectIdEditRoute
  '/projects/$projectId/experts/new': typeof ProjectsProjectIdExpertsNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects/new': typeof ProjectsNewRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/edit': typeof ProjectsProjectIdEditRoute
  '/projects/$projectId/experts/new': typeof ProjectsProjectIdExpertsNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$projectId'
    | '/projects/new'
    | '/projects'
    | '/projects/$projectId/edit'
    | '/projects/$projectId/experts/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/$projectId'
    | '/projects/new'
    | '/projects'
    | '/projects/$projectId/edit'
    | '/projects/$projectId/experts/new'
  id:
    | '__root__'
    | '/'
    | '/projects/$projectId'
    | '/projects/new'
    | '/projects/'
    | '/projects/$projectId/edit'
    | '/projects/$projectId/experts/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRouteWithChildren
  ProjectsNewRoute: typeof ProjectsNewRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRouteWithChildren,
  ProjectsNewRoute: ProjectsNewRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/projects/$projectId",
        "/projects/new",
        "/projects/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects.$projectId.tsx",
      "children": [
        "/projects/$projectId/edit",
        "/projects/$projectId/experts/new"
      ]
    },
    "/projects/new": {
      "filePath": "projects.new.tsx"
    },
    "/projects/": {
      "filePath": "projects.index.tsx"
    },
    "/projects/$projectId/edit": {
      "filePath": "projects.$projectId.edit.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/experts/new": {
      "filePath": "projects.$projectId.experts.new.tsx",
      "parent": "/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
